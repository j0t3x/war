{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1f7a4e35af85b7692098","webpack:///./src/index.js","webpack:///./src/war/connectionManager.js","webpack:///./src/war/connection.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,kBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAW,IAAI;AACf,cAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,2CAA0C;AAC1C;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,+BAA8B,qBAAqB;;AAEnD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,+BAA8B,qCAAqC;;AAEnE;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA","file":"war.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"war\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"war\"] = factory();\n\telse\n\t\troot[\"war\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1f7a4e35af85b7692098","var war = require('./war/connectionManager.js');\nwar = new war();\nmodule.exports = war;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","// onloadstart\tloadstart\n// onprogress\tprogress\n// onabort\tabort\n// onerror\terror\n// onload\tload\n// ontimeout\ttimeout\n// onloadend\tloadend\n\nvar connection = require('./connection.js');\n\nvar connectionManager = function(){\n\n  this.globalHeaders = {};\n  this.methods = [ 'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD' ];\n  this.connections = {};\n\n  for (var i = 0; i < this.methods.length; i++) {\n    this[ this.methods[i] ] = (function( method ){\n      return function( connID, data ){\n        this.send( connID, method, data );\n      };\n    }.bind(this))( this.methods[i] );\n  }\n\n};\n\nconnectionManager.prototype.setGlobalHeaders = function( h ){\n\n  if( !h )\n    throw 'grow a pair... name, value needed to set a temporal header for this connection';\n\n  for (var header in h) {\n    if (h.hasOwnProperty(header)) {\n      //we save just because\n      this.globalHeaders[ header ] = h[ header ];\n    }\n  }\n\n};\n\nconnectionManager.prototype.send = function( connID, method, data ){\n\n  if( !data ) data = null;\n  this.connections[ connID ].startAndSend( method, data, this.globalHeaders );\n\n};\n\n/**\n * This is the start of XMLHttpRequest, here we set up our\n * connection uid and a basic connection object that holds\n * basic data about this individual connection.\n * @param {URL} input the url you want to connect to\n * @returns {string} that is the ID of your connection.\n */\nconnectionManager.prototype.confConnection = function( url ){\n\n  var id = this.generateConnectionID();\n  this.connections[ id ] = new connection( url, id );\n  return this.connections[ id ];\n\n};\n\nconnectionManager.prototype.generateConnectionID = function(){\n\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n    s4() + '-' + s4() + s4() + s4();\n\n};\n\nmodule.exports = connectionManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/war/connectionManager.js\n// module id = 1\n// module chunks = 0","var connection = function( url, id ){\n\n  this.UNSENT = 0;\n  this.OPENED = 1;\n  this.HEADERS_RECEIVED = 2;\n  this.LOADING = 3;\n  this.DONE = 4;\n  this.url =  url;\n  this.id = id;\n  this.data;\n  this.encoding;\n  this.async =  true;\n  this.tempHeaders =  {};\n  this.xhr =  this.checkXHR();\n  this.data = new FormData();\n  this.lastTimeOfUse = 0;\n\n  this.setListeners();\n\n};\n\nconnection.prototype.startAndSend = function( method, data, headers ){\n\n  this.formatAsFormData( data );\n  this.xhr.open( method, this.url, true );//always async\n  this._addTempHeader( headers );\n  this._addTempHeader( this.tempHeaders );\n\n  //timestamp of last use\n  this.setNowLastTimeOfUse();\n\n  this.xhr.send( this.data );\n\n};\n\nconnection.prototype.formatAsFormData = function( data ){\n\n  for ( var member in data ) {\n    if (data.hasOwnProperty( member )) {\n\n      this.data.append( member, data[ member ] );\n\n    }\n  }\n\n};\n\n\nconnection.prototype.setNowLastTimeOfUse = function(){\n\n  var date = Date.now();\n  this.lastTimeOfUse = date;\n\n};\n\nconnection.prototype.addTxtFileFromString = function( name, str ){\n\n  if( typeof str !== 'string' )\n    throw 'Use string for this method';\n\n  var blob = new Blob([str], { type: \"text/plain\" });\n\n  this.data.append( name, blob );\n\n  return this;\n\n};\n\nconnection.prototype.addImgFileFromArr = function( name, arr, type ){\n\n  if( arr instanceof Array )\n    throw 'Use an array for this method';\n\n  if( typeof type !== 'string' )\n    throw 'use a string for the MIME type, like image/jpeg';\n\n  var blob = new Blob([arr], { type: ( type )? type: 'image/jpeg' });\n\n  this.data.append( name, blob );\n\n  return this;\n\n};\n\nconnection.prototype.addTempHeader = function( h ){\n\n  if( !h )\n    throw 'grow a pair... name, value needed to set a temporal header for this onnection';\n\n  for (var header in h) {\n    if (h.hasOwnProperty(header)) {\n      //we save just because\n      this.tempHeaders[ header ] = h[ header ];\n    }\n  }\n\n  //console.log( this.tempHeaders )\n  return this;\n\n};\n\nconnection.prototype._addTempHeader = function( h ){\n\n  if( !h )\n    throw 'grow a pair... name, value needed to set a temporal header for this onnection';\n\n  for (var header in h) {\n    if (h.hasOwnProperty(header)) {\n      //we save just because\n      this.xhr.setRequestHeader( header, h[ header ] );\n    }\n  }\n\n  //console.log( this.tempHeaders )\n  return this;\n\n};\n\n/**\n * This method is yet to be defined, we know that you can send\n * multipart encoded data using FormData API, so.... maybe encoding for this API\n * goes that way: set a variable encoding just to use FormData API\n * @param {string} input supported encoding type\n */\nconnection.prototype.setEncoding = function( enc ) {\n\n  return this;\n};\n\n\nconnection.prototype.checkXHR = function() {\n\n  if (window.XMLHttpRequest) {\n    // Chrome, Firefox, IE7+, Opera, Safari\n    return new XMLHttpRequest();\n  }\n  // IE6\n  try {\n    // The latest stable version. It has the best security, performance,\n    // reliability, and W3C conformance. Ships with Vista, and available\n    // with other OS's via downloads and updates.\n    return new ActiveXObject('MSXML2.XMLHTTP.6.0');\n  } catch (e) {\n\n    try {\n      // The fallback.\n      return new ActiveXObject('MSXML2.XMLHTTP.3.0');\n    } catch (e) {\n      //alert('This browser is not AJAX enabled.');\n      return null;\n    }\n\n  }\n};\n\nconnection.prototype.setListeners = function(){\n\n  this.xhr.addEventListener( 'readystatechange', this.readystatechange.bind(this) );\n  this.xhr.addEventListener( \"progress\", this._progress.bind(this) );\n  this.xhr.addEventListener( \"load\", this._load.bind(this) );\n  this.xhr.addEventListener( \"error\", this._error.bind(this) );\n  this.xhr.addEventListener( \"abort\", this._abort.bind(this) );\n\n};\n\nconnection.prototype.readystatechange = function( context ){\n\n    if (this.xhr.readyState === this.DONE && this.xhr.status === 200) {\n       // Action to be performed when the document is read;\n       this._response( this.xhr.responseText );\n    }else{\n      //not yet rdy\n      //console.log( this.xhr.readyState, this.xhr.status )\n    }\n};\n\nconnection.prototype._response = function( data ){\n  this.response( data );\n};\nconnection.prototype.response = function( data ){};\n\nconnection.prototype._progress = function( e ){\n  var percentComplete;\n  if (e.lengthComputable) {\n    percentComplete = e.loaded / e.total;\n  } else {\n    // Unable to compute progress information since the total size is unknown\n  }\n  this.progress( percentComplete );\n};\nconnection.prototype.progress = function( percentComplete ){};\n\nconnection.prototype._load = function( e ){\n\n  this.load( e );\n};\nconnection.prototype.load = function( e ){};\n\nconnection.prototype._error = function( e ){\n\n  this.error( e );\n};\nconnection.prototype.error = function( e ){};\n\nconnection.prototype._abort = function( e ){\n\n  this.abort( e );\n};\nconnection.prototype.abort = function( e ){};\n\nmodule.exports = connection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/war/connection.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}